"use strict";

var _types = require("./types");

var _types2 = _interopRequireDefault(_types);

var _serializer = require("./serializer");

var _serializer2 = _interopRequireDefault(_serializer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This file is merge updated from steemd's js_operation_serializer program.
/*

./js_operation_serializer |
sed 's/void/future_extensions/g'|
sed 's/steemit_protocol:://g'|
sed 's/14static_variantIJNS_12fixed_stringINSt3__14pairIyyEEEEEEE/string/g'|
sed 's/steemit_future_extensions/future_extensions/g'|
sed 's/steemit_protocol_//g' > tmp.coffee

*/
// coffee tmp.coffee # fix errors until you see: `ChainTypes is not defined`

// npm i -g decaffeinate
// decaffeinate tmp.coffee

// Merge tmp.js - See "Generated code follows" below

var uint16 = _types2.default.uint16,
    uint32 = _types2.default.uint32,
    int16 = _types2.default.int16,
    uint64 = _types2.default.uint64,
    string = _types2.default.string,
    string_binary = _types2.default.string_binary,
    bytes = _types2.default.bytes,
    bool = _types2.default.bool,
    array = _types2.default.array,
    static_variant = _types2.default.static_variant,
    map = _types2.default.map,
    set = _types2.default.set,
    public_key = _types2.default.public_key,
    time_point_sec = _types2.default.time_point_sec,
    optional = _types2.default.optional,
    asset = _types2.default.asset;


var future_extensions = _types2.default.void;
var hardfork_version_vote = _types2.default.void;
var version = _types2.default.void;

// Place-holder, their are dependencies on "operation" .. The final list of
// operations is not avialble until the very end of the generated code.
// See: operation.st_operations = ...
var operation = static_variant();
module.exports.operation = operation;

// For module.exports
var Serializer = function Serializer(operation_name, serilization_types_object) {
  var s = new _serializer2.default(operation_name, serilization_types_object);
  return module.exports[operation_name] = s;
};

var beneficiaries = new Serializer("beneficiaries", {
  account: string,
  weight: uint16
});

var comment_payout_beneficiaries = new Serializer(0, {
  beneficiaries: set(beneficiaries)
});

// Custom-types after Generated code

// ##  Generated code follows
// -------------------------------
/*
When updating generated code (fix closing notation)
Replace:  var operation = static_variant([
with:     operation.st_operations = [

Delete (these are custom types instead):
let public_key = new Serializer(
    "public_key",
    {key_data: bytes(33)}
);

let asset = new Serializer(
    "asset",
    {amount: int64,
    symbol: uint64}
);

Replace: authority.prototype.account_authority_map
With: map((string), (uint16))
*/
var signed_transaction = new Serializer("signed_transaction", {
  ref_block_num: uint16,
  ref_block_prefix: uint32,
  expiration: time_point_sec,
  operations: array(operation),
  extensions: set(future_extensions),
  signatures: array(bytes(65))
});

var signed_block = new Serializer("signed_block", {
  previous: bytes(20),
  timestamp: time_point_sec,
  witness: string,
  transaction_merkle_root: bytes(20),
  extensions: set(static_variant([future_extensions, version, hardfork_version_vote])),
  witness_signature: bytes(65),
  transactions: array(signed_transaction)
});

var block_header = new Serializer("block_header", {
  previous: bytes(20),
  timestamp: time_point_sec,
  witness: string,
  transaction_merkle_root: bytes(20),
  extensions: set(static_variant([future_extensions, version, hardfork_version_vote]))
});

var signed_block_header = new Serializer("signed_block_header", {
  previous: bytes(20),
  timestamp: time_point_sec,
  witness: string,
  transaction_merkle_root: bytes(20),
  extensions: set(static_variant([future_extensions, version, hardfork_version_vote])),
  witness_signature: bytes(65)
});

var vote = new Serializer("vote", {
  voter: string,
  author: string,
  permlink: string,
  weight: int16
});

var comment = new Serializer("comment", {
  parent_author: string,
  parent_permlink: string,
  author: string,
  permlink: string,
  title: string,
  body: string,
  json_metadata: string
});

var transfer = new Serializer("transfer", {
  from: string,
  to: string,
  amount: asset,
  memo: string
});

var transfer_to_vesting = new Serializer("transfer_to_vesting", {
  from: string,
  to: string,
  amount: asset
});

var withdraw_vesting = new Serializer("withdraw_vesting", {
  account: string,
  vesting_shares: asset
});

var price = new Serializer("price", {
  base: asset,
  quote: asset
});

var authority = new Serializer("authority", {
  weight_threshold: uint32,
  account_auths: map(string, uint16),
  key_auths: map(public_key, uint16)
});

var account_create = new Serializer("account_create", {
  fee: asset,
  creator: string,
  new_account_name: string,
  owner: authority,
  active: authority,
  posting: authority,
  memo_key: public_key,
  json_metadata: string
});

var account_update = new Serializer("account_update", {
  account: string,
  owner: optional(authority),
  active: optional(authority),
  posting: optional(authority),
  memo_key: public_key,
  json_metadata: string
});

var account_action_create_pod = new Serializer(0, {
  fee: asset,
  join_fee: optional(asset),
  json_metadata: optional(string),
  allow_join: optional(bool)
});

var account_action_transfer_to_tip = new Serializer(1, {
  amount: asset
});

var htlc_sha256 = new Serializer(0, {
  htlc_hash: bytes(32)
});

var account_action_htlc_create = new Serializer(2, {
  fee: asset,
  reward: asset,
  to: string,
  amount: asset,
  preimage_hash: static_variant([htlc_sha256]),
  preimage_size: uint16,
  expiration: uint32,
  memo: optional(string)
});

var account_action_htlc_update = new Serializer(3, {
  fee: asset,
  htlc_id: bytes(20),
  seconds: uint32,
  reward: asset,
  memo: optional(string)
});

var account_action_htlc_redeem = new Serializer(4, {
  fee: asset,
  htlc_id: bytes(20),
  preimage: bytes(),
  memo: optional(string)
});

var account_action = new Serializer("account_action", {
  account: string,
  action: static_variant([account_action_create_pod, account_action_transfer_to_tip, account_action_htlc_create, account_action_htlc_update, account_action_htlc_redeem])
});

var social_action_comment_create = new Serializer(0, {
  permlink: string,
  parent_author: string,
  parent_permlink: string,
  pod: optional(string),
  max_accepted_payout: optional(asset),
  allow_replies: optional(bool),
  allow_votes: optional(bool),
  allow_curation_rewards: optional(bool),
  allow_friends: optional(bool),
  title: string,
  body: string,
  json_metadata: string
});

var social_action_comment_update = new Serializer(1, {
  permlink: string,
  title: optional(string),
  body: optional(string),
  json_metadata: optional(string)
});

var social_action_comment_delete = new Serializer(2, {
  permlink: string
});

var social_action_claim_vesting_reward = new Serializer(3, {
  amount: asset,
  to: optional(string),
  memo: optional(string)
});

var social_action_claim_vesting_reward_tip = new Serializer(4, {
  amount: asset
});

var social_action_user_tip = new Serializer(5, {
  amount: asset,
  to: optional(string),
  memo: optional(string)
});

var social_action_comment_tip = new Serializer(6, {
  author: string,
  permlink: string,
  amount: asset,
  memo: optional(string)
});

var social_action = new Serializer("social_action", {
  account: string,
  action: static_variant([
  /** 0 */social_action_comment_create,
  /** 1 */social_action_comment_update,
  /** 2 */social_action_comment_delete,
  /** 3 */social_action_claim_vesting_reward,
  /** 4 */social_action_claim_vesting_reward_tip,
  /** 5 */social_action_user_tip,
  /** 6 */social_action_comment_tip])
});

var chain_properties = new Serializer("chain_properties", {
  account_creation_fee: asset,
  maximum_block_size: uint32
});

var witness_update = new Serializer("witness_update", {
  owner: string,
  url: string,
  block_signing_key: public_key,
  props: chain_properties,
  fee: asset
});

var account_witness_vote = new Serializer("account_witness_vote", {
  account: string,
  witness: string,
  approve: bool
});

var account_witness_proxy = new Serializer("account_witness_proxy", {
  account: string,
  proxy: string
});

var custom = new Serializer("custom", {
  required_auths: set(string),
  id: uint16,
  data: bytes()
});

var delete_comment = new Serializer("delete_comment", {
  author: string,
  permlink: string
});

var custom_json = new Serializer("custom_json", {
  required_auths: set(string),
  required_posting_auths: set(string),
  id: string,
  json: string
});

var comment_options = new Serializer("comment_options", {
  author: string,
  permlink: string,
  max_accepted_payout: asset,
  allow_votes: bool,
  allow_curation_rewards: bool,
  extensions: set(static_variant([comment_payout_beneficiaries]))
});

var set_withdraw_vesting_route = new Serializer("set_withdraw_vesting_route", {
  from_account: string,
  to_account: string,
  percent: uint16,
  auto_vest: bool
});

var custom_binary = new Serializer("custom_binary", {
  required_owner_auths: set(string),
  required_active_auths: set(string),
  required_posting_auths: set(string),
  required_auths: array(authority),
  id: string,
  data: bytes()
});

var claim_reward_balance = new Serializer("claim_reward_balance", {
  account: string,
  reward_steem: asset,
  reward_vests: asset
});

var friend_action_send_request = new Serializer(0, {
  memo: string
});

var friend_action_cancel_request = new Serializer(1, {});

var friend_action_accept_request = new Serializer(2, {});

var friend_action_reject_request = new Serializer(3, {});

var friend_action_unfriend = new Serializer(4, {});

var friend_action = new Serializer("friend_action", {
  account: string,
  another: string,
  action: static_variant([friend_action_send_request, friend_action_cancel_request, friend_action_accept_request, friend_action_reject_request, friend_action_unfriend])
});

var pod_action_join_request = new Serializer(0, {
  join_fee: asset,
  fee: asset,
  memo: string
});

var pod_action_cancel_join_request = new Serializer(1, {});

var pod_action_accept_join_request = new Serializer(2, {
  account: string
});

var pod_action_reject_join_request = new Serializer(3, {
  account: string,
  memo: string
});

var pod_action_leave = new Serializer(4, {});

var pod_action_kick = new Serializer(5, {
  account: string,
  memo: string
});

var pod_action_update = new Serializer(6, {
  join_fee: optional(asset),
  json_metadata: optional(string),
  allow_join: optional(bool)
});

var pod_action = new Serializer("pod_action", {
  account: string,
  pod: string,
  action: static_variant([pod_action_join_request, pod_action_cancel_join_request, pod_action_accept_join_request, pod_action_reject_join_request, pod_action_leave, pod_action_kick, pod_action_update])
});

var author_reward = new Serializer("author_reward", {
  author: string,
  permlink: string,
  sbd_payout: asset,
  steem_payout: asset,
  vesting_payout: asset
});

var curation_reward = new Serializer("curation_reward", {
  curator: string,
  reward: asset,
  comment_author: string,
  comment_permlink: string
});

var comment_reward = new Serializer("comment_reward", {
  author: string,
  permlink: string,
  payout: asset
});

var fill_vesting_withdraw = new Serializer("fill_vesting_withdraw", {
  from_account: string,
  to_account: string,
  withdrawn: asset,
  deposited: asset
});

var shutdown_witness = new Serializer("shutdown_witness", { owner: string });

var hardfork = new Serializer("hardfork", { hardfork_id: uint32 });

var comment_payout_update = new Serializer("comment_payout_update", {
  author: string,
  permlink: string
});

var comment_benefactor_reward = new Serializer("comment_benefactor_reward", {
  benefactor: string,
  author: string,
  permlink: string,
  reward: asset
});

var producer_reward = new Serializer("producer_reward", {
  producer: string,
  vesting_shares: asset
});

var devfund = new Serializer("devfund", {
  account: string,
  reward: asset
});

var pod_escrow_transfer_virtual_action = new Serializer(0, {
  account: string,
  pod: string,
  amount: asset
});

var pod_escrow_release_virtual_action = new Serializer(1, {
  account: string,
  pod: string,
  amount: asset
});

var pod_virtual = new Serializer("pod_virtual", {
  action: static_variant([pod_escrow_transfer_virtual_action, pod_escrow_release_virtual_action])
});

var htlc_redeemed_virtual_action = new Serializer(0, {
  htlc_id: bytes(20),
  from: string,
  to: string,
  redeemer: string,
  amount: asset
});

var htlc_refund_virtual_action = new Serializer(1, {
  htlc_id: bytes(20),
  to: string
});

var htlc_virtual = new Serializer("htlc_virtual", {
  action: static_variant([htlc_redeemed_virtual_action, htlc_refund_virtual_action])
});

operation.st_operations = [
/*  0 */vote,
/*  1 */comment,
/*  2 */transfer,
/*  3 */transfer_to_vesting,
/*  4 */withdraw_vesting,
/*  5 */account_create,
/*  6 */account_update,
/*  7 */account_action,
/*  8 */social_action,
/*  9 */witness_update,
/* 10 */account_witness_vote,
/* 11 */account_witness_proxy,
/* 12 */custom,
/* 13 */delete_comment,
/* 14 */custom_json,
/* 15 */comment_options,
/* 16 */set_withdraw_vesting_route,
/* 17 */custom_binary,
/* 18 */claim_reward_balance,
/* 19 */friend_action,
/* 20 */pod_action,
/* 21 */author_reward,
/* 22 */curation_reward,
/* 23 */comment_reward,
/* 24 */fill_vesting_withdraw,
/* 25 */shutdown_witness,
/* 26 */hardfork,
/* 27 */comment_payout_update,
/* 28 */comment_benefactor_reward,
/* 29 */producer_reward,
/* 30 */devfund,
/* 31 */pod_virtual,
/* 32 */htlc_virtual];

var transaction = new Serializer("transaction", {
  ref_block_num: uint16,
  ref_block_prefix: uint32,
  expiration: time_point_sec,
  operations: array(operation),
  extensions: set(future_extensions)
});

//# -------------------------------
//#  Generated code end  S T O P
//# -------------------------------

// Custom Types (do not over-write)

var encrypted_memo = new Serializer("encrypted_memo", {
  from: public_key,
  to: public_key,
  nonce: uint64,
  check: uint32,
  encrypted: string_binary
});
/*

// Make sure all tests pass

npm test

*/